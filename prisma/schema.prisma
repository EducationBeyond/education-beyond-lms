generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique @db.Citext
  emailVerified DateTime? @map("email_verified") @db.Timestamptz(6)
  name          String?
  image         String?
  passwordHash  String?   @map("password_hash")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  accounts      Account[]
  admin         Admin?
  parent        Parent?
  sessions      Session[]
  student       Student?
  tutor         Tutor?

  @@map("users")
}

model Account {
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Parent {
  id            String    @id @default(cuid())
  email         String    @unique @db.Citext
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy     String?   @map("created_by")
  updatedBy     String?   @map("updated_by")
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz(6)
  addressDetail String    @map("address_detail")
  city          String
  firstName     String    @map("first_name")
  firstNameKana String    @map("first_name_kana")
  lastName      String    @map("last_name")
  lastNameKana  String    @map("last_name_kana")
  nameAlphabet  String    @map("name_alphabet")
  /// DEPRECATED: 認証は users.password_hash へ集約予定
  password      String?
  phoneNumber   String    @map("phone_number")
  postalCode    String    @map("postal_code")
  prefecture    String
  userId        String    @unique @map("user_id")
  user          User      @relation(fields: [userId], references: [id])
  payments      Payment[]
  students      Student[]

  @@index([email])
  @@index([deletedAt])
  @@map("parents")
}

model Student {
  id              String           @id @default(cuid())
  parentId        String           @map("parent_id")
  birthdate       DateTime         @db.Date
  gender          Gender
  interests       String[]
  cautions        String?
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy       String?          @map("created_by")
  updatedBy       String?          @map("updated_by")
  deletedAt       DateTime?        @map("deleted_at") @db.Timestamptz(6)
  email           String?          @unique @db.Citext
  entryType       String?          @map("entry_type")
  firstName       String           @map("first_name")
  firstNameKana   String           @map("first_name_kana")
  giftedEpisodes  String           @map("gifted_episodes")
  howDidYouKnow   String?          @map("how_did_you_know")
  lastName        String           @map("last_name")
  lastNameKana    String           @map("last_name_kana")
  nameAlphabet    String           @map("name_alphabet")
  /// DEPRECATED: 認証は users.password_hash へ集約予定
  password        String?
  schoolName      String           @map("school_name")
  userId          String?          @unique @map("user_id")
  learningRecords LearningRecord[]
  pairings        Pairing[]
  reservations    Reservation[]
  parent          Parent           @relation(fields: [parentId], references: [id])
  user            User?            @relation(fields: [userId], references: [id])

  @@index([parentId])
  @@index([deletedAt])
  @@map("students")
}

model Tutor {
  id                   String           @id @default(cuid())
  affiliation          String
  specialties          String[]
  avatarUrl            String?          @map("avatar_url")
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy            String?          @map("created_by")
  updatedBy            String?          @map("updated_by")
  deletedAt            DateTime?        @map("deleted_at") @db.Timestamptz(6)
  accountNumber        String           @map("account_number")
  accountType          String           @map("account_type")
  addressDetail        String           @map("address_detail")
  bankCode             String           @map("bank_code")
  bankName             String           @map("bank_name")
  branchCode           String           @map("branch_code")
  branchName           String           @map("branch_name")
  city                 String
  education            String
  email                String           @unique @db.Citext
  firstName            String           @map("first_name")
  firstNameKana        String           @map("first_name_kana")
  interviewCalendarUrl String?          @map("interview_calendar_url")
  lastName             String           @map("last_name")
  lastNameKana         String           @map("last_name_kana")
  lessonCalendarUrl    String?          @map("lesson_calendar_url")
  nameAlphabet         String           @map("name_alphabet")
  nearestStation       String           @map("nearest_station")
  /// DEPRECATED: 認証は users.password_hash へ集約予定
  password             String?
  phoneNumber          String           @map("phone_number")
  postalCode           String           @map("postal_code")
  prefecture           String
  selfIntroduction     String           @map("self_introduction")
  userId               String           @unique @map("user_id")
  learningRecords      LearningRecord[]
  pairings             Pairing[]
  reservations         Reservation[]
  user                 User             @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([deletedAt])
  @@map("tutors")
}

model Admin {
  id        String    @id @default(cuid())
  name      String
  role      AdminRole @default(ADMIN)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy String?   @map("created_by")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  email     String    @unique @db.Citext
  /// DEPRECATED: 認証は users.password_hash へ集約予定
  password  String?
  userId    String?   @unique @map("user_id")
  user      User?     @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([deletedAt])
  @@map("admins")
}

model LearningRecord {
  id                String    @id @default(cuid())
  studentId         String    @map("student_id")
  tutorId           String    @map("tutor_id")
  date              DateTime  @db.Date
  summary           String
  durationMin       Int       @map("duration_min")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt         DateTime? @map("deleted_at") @db.Timestamptz(6)
  additionalNotes   String?   @map("additional_notes")
  goodPoints        String?   @map("good_points")
  homework          String?
  improvementPoints String?   @map("improvement_points")
  studentLate       Boolean   @default(false) @map("student_late")
  tutorLate         Boolean   @default(false) @map("tutor_late")
  student           Student   @relation(fields: [studentId], references: [id])
  tutor             Tutor     @relation(fields: [tutorId], references: [id])

  @@index([studentId])
  @@index([tutorId])
  @@index([date])
  @@index([deletedAt])
  @@map("learning_records")
}

model Reservation {
  id            String             @id @default(cuid())
  studentId     String             @map("student_id")
  tutorId       String             @map("tutor_id")
  startAt       DateTime           @map("start_at") @db.Timestamptz(6)
  endAt         DateTime           @map("end_at") @db.Timestamptz(6)
  channel       ReservationChannel
  status        ReservationStatus  @default(PENDING)
  notes         String?
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy     String?            @map("created_by")
  updatedBy     String?            @map("updated_by")
  deletedAt     DateTime?          @map("deleted_at") @db.Timestamptz(6)
  calendarEvent CalendarEvent?
  student       Student            @relation(fields: [studentId], references: [id])
  tutor         Tutor              @relation(fields: [tutorId], references: [id])

  @@index([studentId])
  @@index([tutorId])
  @@index([startAt])
  @@index([status])
  @@index([deletedAt])
  @@map("reservations")
}

model Pairing {
  id        String        @id @default(cuid())
  studentId String        @map("student_id")
  tutorId   String        @map("tutor_id")
  status    PairingStatus @default(PENDING)
  score     Float?
  startedAt DateTime?     @map("started_at") @db.Timestamptz(6)
  endedAt   DateTime?     @map("ended_at") @db.Timestamptz(6)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy String?       @map("created_by")
  updatedBy String?       @map("updated_by")
  deletedAt DateTime?     @map("deleted_at") @db.Timestamptz(6)
  messages  Message[]
  student   Student       @relation(fields: [studentId], references: [id])
  tutor     Tutor         @relation(fields: [tutorId], references: [id])

  @@unique([studentId, tutorId])
  @@index([studentId])
  @@index([tutorId])
  @@index([status])
  @@index([deletedAt])
  @@map("pairings")
}

model CalendarEvent {
  id            String           @id @default(cuid())
  reservationId String           @unique @map("reservation_id")
  provider      ExternalProvider
  externalId    String           @map("external_id")
  joinUrl       String?          @map("join_url")
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy     String?          @map("created_by")
  updatedBy     String?          @map("updated_by")
  deletedAt     DateTime?        @map("deleted_at") @db.Timestamptz(6)
  reservation   Reservation      @relation(fields: [reservationId], references: [id])

  @@unique([provider, externalId])
  @@index([provider])
  @@index([deletedAt])
  @@map("calendar_events")
}

model DriveFile {
  id         String           @id @default(cuid())
  provider   ExternalProvider
  externalId String           @map("external_id")
  mimeType   String           @map("mime_type")
  filename   String
  ownerId    String           @map("owner_id")
  ownerType  FileOwnerType    @map("owner_type")
  scope      FileScope
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy  String?          @map("created_by")
  updatedBy  String?          @map("updated_by")
  deletedAt  DateTime?        @map("deleted_at") @db.Timestamptz(6)

  @@unique([provider, externalId])
  @@index([ownerId, ownerType])
  @@index([scope])
  @@index([deletedAt])
  @@map("drive_files")
}

model Payment {
  id         String           @id @default(cuid())
  parentId   String           @map("parent_id")
  provider   ExternalProvider
  externalId String           @map("external_id")
  amount     Decimal          @db.Decimal(10, 2)
  currency   String           @default("JPY")
  status     PaymentStatus    @default(PENDING)
  receivedAt DateTime?        @map("received_at") @db.Timestamptz(6)
  dueDate    DateTime?        @map("due_date") @db.Date
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy  String?          @map("created_by")
  updatedBy  String?          @map("updated_by")
  deletedAt  DateTime?        @map("deleted_at") @db.Timestamptz(6)
  parent     Parent           @relation(fields: [parentId], references: [id])

  @@unique([provider, externalId])
  @@index([parentId])
  @@index([status])
  @@index([receivedAt])
  @@index([dueDate])
  @@index([deletedAt])
  @@map("payments")
}

model CRMContact {
  id         String           @id @default(cuid())
  provider   ExternalProvider
  externalId String           @map("external_id")
  entityType CRMEntityType    @map("entity_type")
  entityId   String           @map("entity_id")
  email      String           @db.Citext
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy  String?          @map("created_by")
  updatedBy  String?          @map("updated_by")
  deletedAt  DateTime?        @map("deleted_at") @db.Timestamptz(6)

  @@unique([provider, externalId])
  @@unique([entityType, entityId])
  @@index([email])
  @@index([deletedAt])
  @@map("crm_contacts")
}

model MessageLink {
  id         String            @id @default(cuid())
  provider   ExternalProvider
  externalId String            @map("external_id")
  channelUrl String            @map("channel_url")
  entityType MessageEntityType @map("entity_type")
  entityId   String            @map("entity_id")
  createdAt  DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy  String?           @map("created_by")
  updatedBy  String?           @map("updated_by")
  deletedAt  DateTime?         @map("deleted_at") @db.Timestamptz(6)

  @@unique([provider, externalId])
  @@index([entityType, entityId])
  @@index([deletedAt])
  @@map("message_links")
}

model Message {
  id          String        @id @default(cuid())
  pairingId   String        @map("pairing_id")
  senderId    String        @map("sender_id")
  senderType  MessageSender @map("sender_type")
  content     String
  messageType MessageType   @default(TEXT) @map("message_type")
  status      MessageStatus @default(SENT)
  externalId  String?       @map("external_id")
  threadId    String?       @map("thread_id")
  readAt      DateTime?     @map("read_at") @db.Timestamptz(6)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime?     @map("deleted_at") @db.Timestamptz(6)
  pairing     Pairing       @relation(fields: [pairingId], references: [id])

  @@index([pairingId])
  @@index([senderId, senderType])
  @@index([createdAt])
  @@index([status])
  @@index([deletedAt])
  @@map("messages")
}

model ExternalAccount {
  id         String           @id @default(cuid())
  userId     String           @map("user_id")
  userType   UserType         @map("user_type")
  provider   ExternalProvider
  externalId String           @map("external_id")
  channelId  String?          @map("channel_id")
  isActive   Boolean          @default(true) @map("is_active")
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime?        @map("deleted_at") @db.Timestamptz(6)

  @@unique([provider, externalId])
  @@unique([userId, userType, provider])
  @@index([userId, userType])
  @@index([provider])
  @@index([deletedAt])
  @@map("external_accounts")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum ReservationChannel {
  MEET
  ONSITE
  OTHER
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PairingStatus {
  PENDING
  ACTIVE
  ENDED
  CANCELLED
}

enum ExternalProvider {
  GOOGLE
  HUBSPOT
  MONEYFORWARD
  LINE
  SLACK
}

enum FileOwnerType {
  STUDENT
  TUTOR
  ADMIN
}

enum FileScope {
  PRIVATE
  STUDENT_PARENT
  STUDENT_TUTOR
  PUBLIC
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum CRMEntityType {
  PARENT
  STUDENT
  TUTOR
}

enum MessageEntityType {
  PARENT
  TUTOR
}

enum MessageSender {
  STUDENT
  TUTOR
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum UserType {
  STUDENT
  TUTOR
  PARENT
}
